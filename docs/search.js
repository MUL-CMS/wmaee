window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "wmaee.codes.vasp", "modulename": "wmaee.codes.vasp", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "wmaee.codes.vasp.automatic_kpoints", "modulename": "wmaee.codes.vasp", "qualname": "automatic_kpoints", "kind": "function", "doc": "<p>Writes a KPOINTS file for generating a regular Gamma-centered k-point mesh.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>length</strong> (float):\nThe length (R_k) that determines the subdivisions N1, N2, and N3.</li>\n<li><strong>write</strong> (bool, optional):\nIf True, writes the KPOINTS file; if False, returns the KPOINTS content as a string.\nDefault is False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None or str</strong>: If write is True, writes the KPOINTS file and returns None.\nIf write is False, returns the KPOINTS content as a string.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">write</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.vasp.regular_kpoints", "modulename": "wmaee.codes.vasp", "qualname": "regular_kpoints", "kind": "function", "doc": "<p>Writes a KPOINTS file for generating a regular k-point mesh.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kpoints</strong> (tuple of int, optional):\nSubdivisions N_1, N_2, and N_3 along the reciprocal lattice vectors.\nDefault is (1, 1, 1).</li>\n<li><strong>shift</strong> (tuple of float, optional):\nShift of the mesh (s_1, s_2, s_3).\nDefault is (0.0, 0.0, 0.0).</li>\n<li><strong>Gamma</strong> (bool, optional):\nIf True, generates a Gamma-centered mesh; if False, uses Monkhorst-Pack scheme.\nDefault is True.</li>\n<li><strong>write</strong> (bool, optional):\nIf True, writes the KPOINTS file; if False, returns the KPOINTS content as a string.\nDefault is False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None or str</strong>: If write is True, writes the KPOINTS file and returns None.\nIf write is False, returns the KPOINTS content as a string.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">kpoints</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">shift</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">Gamma</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">write</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.vasp.generate_potcar", "modulename": "wmaee.codes.vasp", "qualname": "generate_potcar", "kind": "function", "doc": "<p>Generate a POTCAR file for VASP calculations based on the elements in the structure.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>struct</strong> (Union[ase.Atoms, pymatgen.Structure]):\nThe structure for which POTCAR is to be generated. Can be either a pymatgen Structure or \nan ASE Atoms object.</li>\n<li><strong>potcar_dir</strong> (str, optional):\nThe directory where the VASP POTCAR files are located.</li>\n<li><strong>xc</strong> (str, optional):\nThe exchange-correlation functional. Defaults to value in defined in\n<code>wmaee.config.yaml</code>.</li>\n<li><strong>potcar_mapping</strong> (dict, optional):\nAn optional mapping of species to POTCARs, e.g. {'Fe': 'Fe_pv'}. \nFor elements not explicitly specified, a default mapping {'X': 'X'}\nwill be applied.</li>\n<li><strong>write</strong> (bool, optional):\nWhether to write the POTCAR (into the current directory).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pymatgen.Potcar or None</strong>: A Potcar object representing the POTCAR files for the elements in the structure \nif pymatgen is available. Otherwise, returns None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">struct</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">ase</span><span class=\"o\">.</span><span class=\"n\">atoms</span><span class=\"o\">.</span><span class=\"n\">Atoms</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">potcar_dir</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">xc</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">potcar_mapping</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">write</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.vasp.write_incar", "modulename": "wmaee.codes.vasp", "qualname": "write_incar", "kind": "function", "doc": "<p>Function writes an INCAR file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>incar</strong> (Dict[str, Any]):\nA dictionary of key-value pairs specifying the INCAR file.</li>\n<li><strong>filename</strong> (str, optional):\nThe name of the final INCAR file. Default is 'INCAR'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: Writes the INCAR file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">incar</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;INCAR&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.vasp.write_inputs", "modulename": "wmaee.codes.vasp", "qualname": "write_inputs", "kind": "function", "doc": "<p>Write VASP input files.\nWarning: If destination already contains any of the VASP inputs, they \nget overwritten!</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>struct</strong> (Union[ase.Atoms, pymatgen.core.Structure, pymatgen.io.vasp.Poscar]):\nAtomic structure information.</li>\n<li><strong>incar</strong> (Union[dict, pymatgen.io.vasp.Incar]):\nINCAR file information.</li>\n<li><strong>kpoints</strong> (Optional[Union[None, str, pymatgen.io.vasp.Kpoints]], optional):\nKPOINTS file information (default is None). If equal to None, INCAR must \ncontain k-points specification via KSPACING tag/</li>\n<li><strong>potcar</strong> (Optional[Union[None, pymatgen.io.vasp.Potcar]], optional):\nPOTCAR file information (default is None and autogeneration based on \nstruct is used).</li>\n<li><strong>xc</strong> (Optional[Union[str, None]], optional):\nExchange-correlation functional information (default is None and the \nvalue is taken from wmaee.conf.yaml file).</li>\n<li><strong>potcar_mapping</strong> (Optional[Dict[str, str]], optional):\nMapping of elements to POTCAR files (default is {}).</li>\n<li><strong>directory</strong> (Optional[Union[None, str]], optional):\nDirectory to write files (default is None, e.g. current directory).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">struct</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">ase</span><span class=\"o\">.</span><span class=\"n\">atoms</span><span class=\"o\">.</span><span class=\"n\">Atoms</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">incar</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">kpoints</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">potcar</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">xc</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">potcar_mapping</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.vasp.run_vasp", "modulename": "wmaee.codes.vasp", "qualname": "run_vasp", "kind": "function", "doc": "<p>Run VASP (Vienna Ab initio Simulation Package) using the specified command,\narguments, and working directory.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command</strong> (str, optional):\nThe VASP command. If not provided, it will be obtained from the\nconfiguration file.</li>\n<li><strong>args</strong> (dict, optional):\nAdditional arguments to be passed to the VASP command.</li>\n<li><strong>directory</strong> (str, optional):\nThe working directory for running VASP.</li>\n<li><strong>log</strong> (bool or str, optional):\nIf True, capture the output to the screen. If a string is provided,\ncapture the output to the specified log file. If False, run silently\nwithout capturing output.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.vasp.parse_output", "modulename": "wmaee.codes.vasp", "qualname": "parse_output", "kind": "function", "doc": "<p>Parse VASP output files and return relevant information.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>directory</strong> (str or None, optional):\nThe path to the directory containing VASP output files. If None, the current working directory is used.</li>\n<li><strong>POSCAR</strong> (str, optional):\nName of the POSCAR file. Default is 'POSCAR'.</li>\n<li><strong>CONTCAR</strong> (str, optional):\nName of the CONTCAR file. Default is 'CONTCAR'.</li>\n<li><strong>OSZICAR</strong> (str, optional):\nName of the OSZICAR file. Default is 'OSZICAR'.</li>\n<li><strong>OUTCAR</strong> (str, optional):\nName of the OUTCAR file. Default is 'OUTCAR'.</li>\n<li><strong>vasprun</strong> (str, optional):\nName of the vasprun.xml file. Default is 'vasprun.xml'.</li>\n<li><strong>XDATCAR</strong> (str, optional):\nName of the XDATCAR file. Default is 'XDATCAR'.</li>\n<li><strong>ase_atoms</strong> (bool, optional):\nUse ASE atoms instead of pymatgen structure if True. Default is False.</li>\n<li><strong>parse_oszicar</strong> (bool, optional):\nParse ionic step energies from OSZICAR if True (only for pymatgen). Default is False.</li>\n<li><strong>parse_outcar</strong> (bool, optional):\nParse final energies (and also magnetization if pymatgen is available) from OUTCAR if True. Default is False.</li>\n<li><strong>parse_vasprun</strong> (bool, optional):\nParse vasprun.xml for ionic relaxation energies if True. Default is True.</li>\n<li><strong>parse_vasprun_dos</strong> (bool, optional):\nParse DOS information from vasprun.xml if True (only if pymatgen is available). Default is False.</li>\n<li><strong>parse_xdatcar</strong> (bool, optional):\nParse ionic relaxation steps from XDATCAR if True. Default is False.</li>\n<li><strong>return_DocDict</strong> (bool, optional):\nReturn DotDict instead of a regular dictionary if True. Default is True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>DotDict or dict</strong>: A DotDict or dictionary containing parsed information.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">POSCAR</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;POSCAR&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">CONTCAR</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;CONTCAR&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">OSZICAR</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;OSZICAR&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">OUTCAR</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;OUTCAR&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">vasprun</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;vasprun.xml&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">XDATCAR</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;XDATCAR&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">DOSCAR</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;DOSCAR&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ase_atoms</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">parse_oszicar</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">parse_outcar</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">parse_vasprun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">parse_vasprun_dos</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">parse_xdatcar</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">parse_doscar</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">return_DocDict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">wmaee</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">data_structs</span><span class=\"o\">.</span><span class=\"n\">DotDict</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.vasp.vasp_ml", "modulename": "wmaee.codes.vasp.vasp_ml", "kind": "module", "doc": "<p>Collection of helper functions for handling ML functionality of VASP.</p>\n"}, {"fullname": "wmaee.codes.vasp.vasp_ml.ML_ABN_concat", "modulename": "wmaee.codes.vasp.vasp_ml", "qualname": "ML_ABN_concat", "kind": "function", "doc": "<p>Concatenates a list of <code>ML_AB</code> or <code>ML_ABN</code> files. This function merges headers and structures\nfrom multiple files into a single output file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>files</strong> (List[str]):\nList of paths to input files that should be concatenated.</li>\n<li><strong>output</strong> (str, optional):\nPath for the output file, by default 'ML_AB'.</li>\n<li><strong>overwrite</strong> (bool, optional):\nWhether to overwrite the output file if it already exists, by default False.</li>\n<li><strong>verbose</strong> (bool, optional):\nIf True, prints details of the merging process, by default True.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>FileExistsError</strong>: If the output file exists and overwrite is set to False.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This function currently assumes that all input files contain the same chemistry.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">files</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">output</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ML_AB&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.vasp.vasp_ml.generate_ML_AB", "modulename": "wmaee.codes.vasp.vasp_ml", "qualname": "generate_ML_AB", "kind": "function", "doc": "<p>Generate ML_AB formatted output from VASP calculation outputs.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input</strong> (str, optional):\nPath to the input file, by default 'OUTCAR'</li>\n<li><strong>input_type</strong> (str, optional):\nType of the input file, either 'OUTCAR' or 'vasprun', by default 'OUTCAR'</li>\n<li><strong>output</strong> (str, optional):\nPath to the output file, by default 'ML_AB'</li>\n<li><strong>overwrite</strong> (bool, optional):\nFlag to overwrite the existing output file, by default False</li>\n<li><strong>verbose</strong> (bool, optional):\nFlag to print detailed output, by default True</li>\n<li><strong>system_name</strong> (str, optional):\nName of the system, by default 'parsed AIMD'</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception</strong>: If input_type is not 'OUTCAR' or 'vasprun'</li>\n<li><strong>FileExistsError</strong>: If the input file does not exist</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;OUTCAR&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">input_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;OUTCAR&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">output</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ML_AB&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">system_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;parsed AIMD&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.lammps", "modulename": "wmaee.codes.lammps", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "wmaee.codes.lammps.get_models", "modulename": "wmaee.codes.lammps", "qualname": "get_models", "kind": "function", "doc": "<p>Get the list of interatomic potential models available in the LAMMPS potentials database.</p>\n\n<p>Returns:\n    List[str]: A list of available potential models.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.lammps.get_potentials", "modulename": "wmaee.codes.lammps", "qualname": "get_potentials", "kind": "function", "doc": "<p>Get LAMMPS potentials for a given model and optionally filtered by species.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>model (str): The name of the LAMMPS potential model.</li>\n<li>species (Optional[List[str]]): A list of element symbols to filter the \npotentials. If None, all potentials are returned.</li>\n<li>return_df (Optional[bool]): Whether to return potentials as pandas.DataFrame\nor a simple dictionary. Default is True.</li>\n</ul>\n\n<p>Returns:\nTuple[str, List[Dict[str, Union[str, List[str]]]]]: A tuple containing the \npotential root path and a list of potential dictionaries.\n    - The first element of the tuple is the potential root path.\n    - The second element is a list of potential dictionaries, where each \n    dictionary represents a LAMMPS potential and has the following keys:\n        - 'elements' (List[str]): The list of element symbols associated \n        with the potential.\n        - 'pot_file' (str): The filename of the potential file.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">species</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_df</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.lammps.run_lammps", "modulename": "wmaee.codes.lammps", "qualname": "run_lammps", "kind": "function", "doc": "<p>Run LAMMPS (Large-scale Atomic/Molecular Massively Parallel Simulator) using the specified command,\narguments, working directory, and LAMMPS input script.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>script_name</strong> (str, optional):\nThe name of the LAMMPS input script. Defaults to 'lammps.in'.</li>\n<li><strong>lmp_in</strong> (str, optional):\nThe entire LAMMPS input script as a string. If provided, it will be written\ninto the file <script_name> before executing lammps. If this file exists, it will be\noverwritten.</li>\n<li><strong>command</strong> (str, optional):\nThe LAMMPS command. If not provided, it will be obtained from the\nconfiguration file.</li>\n<li><strong>args</strong> (dict, optional):\nAdditional arguments to be passed to the LAMMPS command.</li>\n<li><strong>directory</strong> (str, optional):\nThe working directory for running LAMMPS.</li>\n<li><strong>log</strong> (bool or str, optional):\nIf True, capture the output to the screen. If a string is provided,\ncapture the output to the specified log file. If False, run silently\nwithout capturing output.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">script_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;lammps.in&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">lmp_in</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.lammps.parse_logfile", "modulename": "wmaee.codes.lammps", "qualname": "parse_logfile", "kind": "function", "doc": "<p>Parse a LAMMPS logfile and extract thermo data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>logfile</strong> (str):\nPath to the LAMMPS logfile.</li>\n<li><strong>return_df</strong> (bool, optional):\nIf True, returns a pandas DataFrame; if False, returns a list of dictionaries,\nby default True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Union[pd.DataFrame, List[Dict[str, List[Optional[float]]]]]</strong>: Parsed thermo data either as a pandas DataFrame or a list of dictionaries.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">logfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">return_df</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.lammps.write_lammps_data", "modulename": "wmaee.codes.lammps", "qualname": "write_lammps_data", "kind": "function", "doc": "<p>Write atomic structure data to a LAMMPS data file. Method forwarded from ase.io.lammpsdata.write_lammps_data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dumpfile</strong> (Union[str, IO]):\nFile to which the output will be written.</li>\n<li><strong>atoms</strong> (Atoms):\nAtoms to be written.</li>\n<li><strong>specorder</strong> (Optional[List[str]], optional):\nChemical symbols in the order of LAMMPS atom types, by default None</li>\n<li><strong>force_skew</strong> (bool, optional):\nForce to write the cell as a triclinic box (see LAMMPS documentation),\nby default False</li>\n<li><strong>units</strong> (str, optional):\nLAMMPS units (see LAMMPS documentation), by default 'metal'</li>\n<li><strong>atom_style</strong> ({'atomic', 'charge', 'full'}, optional):\nLAMMPS atom style (see LAMMPS documentation), by default 'atomic'</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dumpfile</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">IO</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">atoms</span><span class=\"p\">:</span> <span class=\"n\">ase</span><span class=\"o\">.</span><span class=\"n\">atoms</span><span class=\"o\">.</span><span class=\"n\">Atoms</span>,</span><span class=\"param\">\t<span class=\"n\">specorder</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force_skew</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">velocities</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;metal&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">atom_style</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;atomic&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.lammps.read_lammps_dump", "modulename": "wmaee.codes.lammps", "qualname": "read_lammps_dump", "kind": "function", "doc": "<p>Read Atoms object(s) from a LAMMPS dump file. Method forwarded from ase.io.lammpsrun.read_lammps_dump.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dump_file</strong> (Union[str, IO]):\nName of the file to read from or a file descriptor.</li>\n<li><p><strong>index</strong> (Any, optional):\nSpecifies which configuration to read. \nDefault is slice(None), which returns all configurations.</p>\n\n<p>Examples</p></li>\n</ul>\n\n<hr />\n\n<p>index=0\n       First configuration\n   index=-2\n       Second to last\n   index=slice(None)\n       All configurations\n   index='-3:'\n       Three last configurations\n   index='::2'\n       Even configurations\n   index='1::2'\n       Odd configurations</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Union[Atoms, List[Atoms]]</strong>: An Atoms object or a list of Atoms objects depending on the number of configurations read.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dump_file</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">IO</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">ase</span><span class=\"o\">.</span><span class=\"n\">atoms</span><span class=\"o\">.</span><span class=\"n\">Atoms</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ase</span><span class=\"o\">.</span><span class=\"n\">atoms</span><span class=\"o\">.</span><span class=\"n\">Atoms</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.pyiron.pyiron_cluster", "modulename": "wmaee.codes.pyiron.pyiron_cluster", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "wmaee.codes.pyiron.pyiron_cluster.assign_partition_mulhpc", "modulename": "wmaee.codes.pyiron.pyiron_cluster", "qualname": "assign_partition_mulhpc", "kind": "function", "doc": "<p>Assigns a free partition from available partitions <code>p11</code> or <code>p12</code>.</p>\n\n<p>This function queries the remote system for idle partitions and assigns one of the available \npartitions (<code>p11</code> or <code>p12</code>). If neither partition is available, it defaults to returning <code>p11</code>.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The name of the assigned partition (<code>p11</code> or <code>p12</code>).\nIf no free partition is found, returns <code>p11</code> by default.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>The function relies on the <code>sinfo</code> command to retrieve the state of partitions.</li>\n<li>Partitions are considered free if they are marked as \"idle\" in the output of <code>sinfo</code>.</li>\n<li>If the partition name ends with an asterisk (<code>*</code>), it is stripped out before returning.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">assign_partition_mulhpc</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;p11&#39;  # or &#39;p12&#39;, depending on availability</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.pyiron.pyiron_NEB_task", "modulename": "wmaee.codes.pyiron.pyiron_NEB_task", "kind": "module", "doc": "<p>==============================================================================</p>\n\n<h1 id=\"module-name-pyiron_neb_taskpy\">Module Name: pyiron_NEB_task.py</h1>\n\n<p>Description:\n    This module provides a framework for setting up and executing NEB (Nudged\n    Elastic Band) calculations using the pyiron framework with VASP. It includes\n    classes and methods to manage initial and final states, reorder atoms,\n    create NEB jobs, handle image interpolation, and collect and fit energy data.</p>\n\n<pre><code>WARNING: It assumes remote and manual execution of VASP (on the cluster), it \nonly handles transfer of the input/output files, not the execution (as should \nbe ideally the case with pyiron).\n</code></pre>\n\n<p>Dependencies:\n    - pyiron_atomistics\n    - pyiron_base\n    - NumPy\n    - SciPy</p>\n\n<p>Usage:\n    from NEB import NEB\n    # Create a NEB object, set initial and final states, and run the NEB calculation\n    neb = NEB(pr, 'NEB_Calculation')\n    neb.set_initial_state(initial_job)\n    neb.set_final_state(final_job)\n    neb_job = neb.create_neb_job(job_name='neb', nImages=5)\n    neb_job.write_and_transfer_to_remote()\n    # run the job manually on HPC\n    neb_job.transfer_from_remote_and_collect()\n    # get the barrier\n    print(job['output/neb/barrier_forward'])</p>\n\n<p>==============================================================================</p>\n"}, {"fullname": "wmaee.codes.pyiron.pyiron_NEB_task.get_species_symbols_new", "modulename": "wmaee.codes.pyiron.pyiron_NEB_task", "qualname": "get_species_symbols_new", "kind": "function", "doc": "<p>MONKEY PATCH to get correct order of POTCARs.</p>\n\n<p>Returns:\n    numpy.ndarray: List of the symbols of the species.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.pyiron.pyiron_NEB_task.NEB", "modulename": "wmaee.codes.pyiron.pyiron_NEB_task", "qualname": "NEB", "kind": "class", "doc": "<p>Class to handle the setup and execution of NEB (Nudged Elastic Band) calculations.</p>\n"}, {"fullname": "wmaee.codes.pyiron.pyiron_NEB_task.NEB.__init__", "modulename": "wmaee.codes.pyiron.pyiron_NEB_task", "qualname": "NEB.__init__", "kind": "function", "doc": "<p>Initialize the NEB class.</p>\n\n<p>Parameters:\n    pr (Project): Pyiron project object.\n    NEB_calc_name (str): Name of the NEB calculation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pr</span>, </span><span class=\"param\"><span class=\"n\">NEB_calc_name</span></span>)</span>"}, {"fullname": "wmaee.codes.pyiron.pyiron_NEB_task.NEB.pr", "modulename": "wmaee.codes.pyiron.pyiron_NEB_task", "qualname": "NEB.pr", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "wmaee.codes.pyiron.pyiron_NEB_task.NEB.initial", "modulename": "wmaee.codes.pyiron.pyiron_NEB_task", "qualname": "NEB.initial", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "wmaee.codes.pyiron.pyiron_NEB_task.NEB.add_initial_state", "modulename": "wmaee.codes.pyiron.pyiron_NEB_task", "qualname": "NEB.add_initial_state", "kind": "function", "doc": "<p>Add the initial state for the NEB calculation.</p>\n\n<p>Parameters:\n    initial_job (Vasp_job): Initial state as a VASP job.\n    delete_existing (bool, optional): Whether to delete existing files.\n    wrap (float, optional): Wrap value for the atomic positions.</p>\n\n<p>Raises:\n    TypeError: If <code>initial_job</code> is not of type <code>Vasp_job</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">initial_job</span>, </span><span class=\"param\"><span class=\"n\">delete_existing</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">wrap</span><span class=\"o\">=</span><span class=\"mf\">0.98</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.pyiron.pyiron_NEB_task.NEB.set_initial_state", "modulename": "wmaee.codes.pyiron.pyiron_NEB_task", "qualname": "NEB.set_initial_state", "kind": "function", "doc": "<p>Set the initial state from an existing VASP job.</p>\n\n<p>Parameters:\n    initial_job (Vasp_job): Initial state as a VASP job.\n    wrap (float, optional): Wrap value for the atomic positions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">initial_job</span>, </span><span class=\"param\"><span class=\"n\">wrap</span><span class=\"o\">=</span><span class=\"mf\">0.98</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.pyiron.pyiron_NEB_task.NEB.set_final_state", "modulename": "wmaee.codes.pyiron.pyiron_NEB_task", "qualname": "NEB.set_final_state", "kind": "function", "doc": "<p>Set the final state for the NEB calculation.</p>\n\n<p>Parameters:\n    final_job (Vasp_job): Final state as a VASP job.\n    wrap (float, optional): Wrap value for the atomic positions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">final_job</span>, </span><span class=\"param\"><span class=\"n\">wrap</span><span class=\"o\">=</span><span class=\"mf\">0.98</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.pyiron.pyiron_NEB_task.NEB.reorder_final", "modulename": "wmaee.codes.pyiron.pyiron_NEB_task", "qualname": "NEB.reorder_final", "kind": "function", "doc": "<p>Reorder the final structure based on the initial structure.</p>\n\n<p>Parameters:\n    moving_index (int): Index of the moving atom.\n    max_shift (float, optional): Maximum allowable shift for atom mapping.\n    verbose (bool, optional): If True, prints information about the atom positions.\n    wrap (float, optional): Wrap value for the atomic positions.</p>\n\n<p>Raises:\n    Exception: If there are issues with the atom mapping.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">moving_index</span>, </span><span class=\"param\"><span class=\"n\">max_shift</span><span class=\"o\">=</span><span class=\"mf\">0.05</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">wrap</span><span class=\"o\">=</span><span class=\"mf\">0.98</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.pyiron.pyiron_NEB_task.NEB.create_neb_job", "modulename": "wmaee.codes.pyiron.pyiron_NEB_task", "qualname": "NEB.create_neb_job", "kind": "function", "doc": "<p>Create a NEB job.</p>\n\n<p>Parameters:\n    job_name (str, optional): Name of the NEB job.\n    nImages (int, optional): Number of images for the NEB calculation.</p>\n\n<p>Returns:\n    NEBjob: Created NEB job object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">job_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;neb&#39;</span>, </span><span class=\"param\"><span class=\"n\">nImages</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.pyiron.pyiron_NEB_task.NEBjob", "modulename": "wmaee.codes.pyiron.pyiron_NEB_task", "qualname": "NEBjob", "kind": "class", "doc": "<p>Class for handling specific NEB (Nudged Elastic Band) job operations.</p>\n", "bases": "pyiron_atomistics.vasp.vasp.Vasp"}, {"fullname": "wmaee.codes.pyiron.pyiron_NEB_task.NEBjob.get_initial_images", "modulename": "wmaee.codes.pyiron.pyiron_NEB_task", "qualname": "NEBjob.get_initial_images", "kind": "function", "doc": "<p>Retrieve the initial interpolated images.</p>\n\n<p>Returns:\n    Trajectory: Trajectory object containing the initial images.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.pyiron.pyiron_NEB_task.NEBjob.get_final_images", "modulename": "wmaee.codes.pyiron.pyiron_NEB_task", "qualname": "NEBjob.get_final_images", "kind": "function", "doc": "<p>Retrieve the final interpolated images after relaxation.</p>\n\n<p>Returns:\n    Trajectory: Trajectory object containing the final images.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.pyiron.pyiron_NEB_task.NEBjob.write_and_transfer_to_remote", "modulename": "wmaee.codes.pyiron.pyiron_NEB_task", "qualname": "NEBjob.write_and_transfer_to_remote", "kind": "function", "doc": "<p>Write the input files and transfer them to the remote cluster.</p>\n\n<p>Warnings:\n    If the job is already marked as finished, a warning is issued and no action is taken.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.pyiron.pyiron_NEB_task.NEBjob.collect_data", "modulename": "wmaee.codes.pyiron.pyiron_NEB_task", "qualname": "NEBjob.collect_data", "kind": "function", "doc": "<p>Collect the data from the NEB calculation.</p>\n\n<p>Parameters:\n    wrap (float or bool, optional): Wrap value for atomic positions. Set to <code>False</code> to disable wrapping.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">wrap</span><span class=\"o\">=</span><span class=\"mf\">0.98</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.pyiron.pyiron_NEB_task.NEBjob.transfer_from_remote_and_collect", "modulename": "wmaee.codes.pyiron.pyiron_NEB_task", "qualname": "NEBjob.transfer_from_remote_and_collect", "kind": "function", "doc": "<p>Transfer files from the remote cluster and collect data locally.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "wmaee.codes.pyiron.pyiron_NEB_task.NEBjob.get_energy_fit", "modulename": "wmaee.codes.pyiron.pyiron_NEB_task", "qualname": "NEBjob.get_energy_fit", "kind": "function", "doc": "<p>Get the fitted polynomial for the NEB energy profile.</p>\n\n<p>Returns:\n    Polynomial: The fitted polynomial.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "wmaee.core.io", "modulename": "wmaee.core.io", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "wmaee.core.io.working_directory", "modulename": "wmaee.core.io", "qualname": "working_directory", "kind": "class", "doc": "<p>A convenience class which provides syntactic sugar, allowing the user to change directories.\nCan also be nested.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong> (Optional[str], optional):\nName of the directory. If None is given, <code>os.getcwd()</code> will be used. Default is None.</li>\n<li><strong>create</strong> (bool, optional):\nWhether to create the directory if it doesn't exist. Default is True.</li>\n<li><strong>delete</strong> (bool, optional):\nWhether to delete the directory after a 'with' clause. Default is False.</li>\n</ul>\n"}, {"fullname": "wmaee.core.io.working_directory.__init__", "modulename": "wmaee.core.io", "qualname": "working_directory.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">create</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">delete</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "wmaee.core.io.working_directory.name", "modulename": "wmaee.core.io", "qualname": "working_directory.name", "kind": "variable", "doc": "<p>Get the name of the working directory.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The name of the working directory.</li>\n</ul>\n", "annotation": ": str"}, {"fullname": "wmaee.core.io.working_directory.active", "modulename": "wmaee.core.io", "qualname": "working_directory.active", "kind": "variable", "doc": "<p>Check if the working directory is active.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if the working directory is active, False otherwise.</li>\n</ul>\n", "annotation": ": bool"}, {"fullname": "wmaee.core.io.grep", "modulename": "wmaee.core.io", "qualname": "grep", "kind": "function", "doc": "<p>A simple Python implementation of the Linux <code>grep</code> command.\nIt goes through a (text) file and returns all lines containing a desired string as a generator.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file</strong> (str):\nName of the file to be opened for reading and searching of the string.</li>\n<li><strong>string</strong> (str):\nString to be searched for.</li>\n</ul>\n\n<h6 id=\"yields\">Yields</h6>\n\n<ul>\n<li><strong>str</strong>: (Next) line containing the string <code>string</code> in the file <code>file</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.core.config", "modulename": "wmaee.core.config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "wmaee.core.config.load_config", "modulename": "wmaee.core.config", "qualname": "load_config", "kind": "function", "doc": "<p>Loads a YAML config file from the specified path. If the path is not specified,\nthe routine will try to load \"~/.wmaee.conf.yaml\" in case it exists. Otherwise,\nit uses the value from the environment variable <code>WMAEE_CONFIG_FILE</code>. If all options fail,\na <code>FileNotFoundError</code> is raised.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (Optional[str], optional):\nPath to the config file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, Any]</strong>: Configuration dictionary.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.core.config.Config", "modulename": "wmaee.core.config", "qualname": "Config", "kind": "class", "doc": "<p>Configuration class that loads settings from a YAML file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (Optional[str], optional):\nPath to the config file.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>_config</strong> (Dict[str, Any]):\nConfiguration dictionary.</li>\n</ul>\n"}, {"fullname": "wmaee.core.config.Config.__init__", "modulename": "wmaee.core.config", "qualname": "Config.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "wmaee.core.config.Config.get", "modulename": "wmaee.core.config", "qualname": "Config.get", "kind": "function", "doc": "<p>Retrieve a value from the configuration.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>items</strong> (str):\nConfiguration item key.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Any</strong>: Value associated with the specified key.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.core.data_structs", "modulename": "wmaee.core.data_structs", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "wmaee.core.data_structs.DotDict", "modulename": "wmaee.core.data_structs", "qualname": "DotDict", "kind": "class", "doc": "<p>A custom dictionary class that allows accessing items using dot notation.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">my_dict</span> <span class=\"o\">=</span> <span class=\"n\">DotDict</span><span class=\"p\">({</span><span class=\"s2\">&quot;item&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">item_value</span> <span class=\"o\">=</span> <span class=\"n\">my_dict</span><span class=\"o\">.</span><span class=\"n\">item</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item_value</span><span class=\"p\">)</span>\n<span class=\"go\">&quot;value&quot;</span>\n</code></pre>\n</div>\n", "bases": "builtins.dict"}, {"fullname": "wmaee.core.utils", "modulename": "wmaee.core.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "wmaee.core.utils.override_environ", "modulename": "wmaee.core.utils", "qualname": "override_environ", "kind": "function", "doc": "<p>Temporarily updates the <code>os.environ</code> dictionary in-place.</p>\n\n<p>The <code>os.environ</code> dictionary is updated in-place so that the modification\nis sure to work in all situations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>remove</strong>:  Environment variables to remove.</li>\n<li><strong>update</strong>:  Dictionary of environment variables and values to add/update.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">remove</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">update</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "wmaee.core.utils.merge", "modulename": "wmaee.core.utils", "qualname": "merge", "kind": "function", "doc": "<p>Merge all specified dictionaries in {dicts} into a single one. Moreover, {kwargs} will be included. In case\nduplicate keys exist, the order of passing the dictionaries will determine which values will sustain for the keys.\nThe last updated is carried out using {kwargs}</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dicts</strong>:  the dictionaries to merge</li>\n<li><strong>factory</strong>:  the constructor of the mapping type to create (default is <code>dict</code>)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a merged dictionary of type {factory}</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">dicts</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\tfactory: Type = &lt;class &#x27;dict&#x27;&gt;,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.core.utils.ensure_iterable", "modulename": "wmaee.core.utils", "qualname": "ensure_iterable", "kind": "function", "doc": "<p>wraps an object {o} into an iterable it is not and iterable. the type of the iterable is specified by {factory}</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>o</strong>:  the object to wrap</li>\n<li><strong>exclude</strong>:  type list of iterable objects which need wrapping (default is (str, bytes))</li>\n<li><strong>factory</strong>:  the Iterable type in which {o} should be wrapped</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">o</span>, </span><span class=\"param\">exclude=(&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;bytes&#x27;&gt;), </span><span class=\"param\">factory=&lt;class &#x27;tuple&#x27;&gt;</span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "wmaee.core.visualize", "modulename": "wmaee.core.visualize", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "wmaee.core.visualize.plot3d", "modulename": "wmaee.core.visualize", "qualname": "plot3d", "kind": "function", "doc": "<p>Plot3d relies on NGLView or plotly to visualize atomic structures. Here, we construct a string in the \"protein database\"</p>\n\n<p>The final widget is returned. If it is assigned to a variable, the visualization is suppressed until that\nvariable is evaluated, and in the meantime more NGL operations can be applied to it to modify the visualization.</p>\n\n<p>Args:\n    mode (str): <code>NGLView</code>, <code>plotly</code> or <code>ase</code>\n    show_cell (bool): Whether or not to show the frame. (Default is True.)\n    show_axes (bool): Whether or not to show xyz axes. (Default is True.)\n    camera (str): 'perspective' or 'orthographic'. (Default is 'perspective'.)\n    spacefill (bool): Whether to use a space-filling or ball-and-stick representation. (Default is True, use\n        space-filling atoms.)\n    particle_size (float): Size of the particles. (Default is 1.)\n    select_atoms (numpy.ndarray): Indices of atoms to show, either as integers or a boolean array mask.\n        (Default is None, show all atoms.)\n    background (str): Background color. (Default is 'white'.)\n    color_scheme (str): NGLView color scheme to use. (Default is None, color by element.)\n    colors (numpy.ndarray): A per-atom array of HTML color names or hex color codes to use for atomic colors.\n        (Default is None, use coloring scheme.)\n    scalar_field (numpy.ndarray): Color each atom according to the array value (Default is None, use coloring\n        scheme.)\n    scalar_start (float): The scalar value to be mapped onto the low end of the color map (lower values are\n        clipped). (Default is None, use the minimum value in <code>scalar_field</code>.)\n    scalar_end (float): The scalar value to be mapped onto the high end of the color map (higher values are\n        clipped). (Default is None, use the maximum value in <code>scalar_field</code>.)\n    scalar_cmap (matplotlib.cm): The colormap to use. (Default is None, giving a blue-red divergent map.)\n    vector_field (numpy.ndarray): Add vectors (3 values) originating at each atom. (Default is None, no\n        vectors.)\n    vector_color (numpy.ndarray): Colors for the vectors (only available with vector_field). (Default is None,\n        vectors are colored by their direction.)\n    magnetic_moments (bool): Plot magnetic moments as 'scalar_field' or 'vector_field'.\n    view_plane (numpy.ndarray): A Nx3-array (N = 1,2,3); the first 3d-component of the array specifies\n        which plane of the system to view (for example, [1, 0, 0], [1, 1, 0] or the [1, 1, 1] planes), the\n        second 3d-component (if specified, otherwise [1, 0, 0]) gives the horizontal direction, and the third\n        component (if specified) is the vertical component, which is ignored and calculated internally. The\n        orthonormality of the orientation is internally ensured, and therefore is not required in the function\n        call. (Default is np.array([0, 0, 1]), which is view normal to the x-y plane.)\n    distance_from_camera (float): Distance of the camera from the structure. Higher = farther away.\n        (Default is 14, which also seems to be the NGLView default value.)</p>\n\n<pre><code>Possible NGLView color schemes:\n  \" \", \"picking\", \"random\", \"uniform\", \"atomindex\", \"residueindex\",\n  \"chainindex\", \"modelindex\", \"sstruc\", \"element\", \"resname\", \"bfactor\",\n  \"hydrophobicity\", \"value\", \"volume\", \"occupancy\"\n</code></pre>\n\n<p>Returns:\n    (nglview.NGLWidget): The NGLView widget itself, which can be operated on further or viewed as-is.</p>\n\n<p>Warnings:\n    * Many features only work with space-filling atoms (e.g. coloring by a scalar field).\n    * The colour interpretation of some hex codes is weird, e.g. 'green'.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">structure</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;NGLview&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">show_cell</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">show_axes</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">camera</span><span class=\"o\">=</span><span class=\"s1\">&#39;orthographic&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">spacefill</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">particle_size</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">select_atoms</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">background</span><span class=\"o\">=</span><span class=\"s1\">&#39;white&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color_scheme</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scalar_field</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scalar_start</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scalar_end</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scalar_cmap</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">vector_field</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">vector_color</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">magnetic_moments</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">view_plane</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>,</span><span class=\"param\">\t<span class=\"n\">distance_from_camera</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "wmaee.core.visualize.animate_trajectory", "modulename": "wmaee.core.visualize", "qualname": "animate_trajectory", "kind": "function", "doc": "<p>Animate a series of atomic structures.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>trajectory</strong>:  the trajectory to animate</li>\n<li><strong>spacefill</strong>:  If True, then atoms are visualized in spacefill stype</li>\n<li><strong>show_cell</strong>:  True if the cell boundaries of the structure is to be shown</li>\n<li><strong>particle_size</strong>:  Scaling factor for the spheres representing the atoms. (The radius is determined by\nthe atomic number)</li>\n<li><strong>center_of_mass</strong>:  False (default) if the specified positions are w.r.t. the origin</li>\n<li><strong>camera</strong>:  camera perspective, choose from \"orthographic\" or \"perspective\" (default is \"orthographic\")</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>nglview IPython widget</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">trajectory</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">Trajectory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">spacefill</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">show_cell</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">center_of_mass</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">particle_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">camera</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;orthographic&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "wmaee.scopes.cij", "modulename": "wmaee.scopes.cij", "kind": "module", "doc": "<p>Convenient functions for working with elasticity.</p>\n"}, {"fullname": "wmaee.scopes.cij.get_ULICS", "modulename": "wmaee.scopes.cij", "qualname": "get_ULICS", "kind": "function", "doc": "<p>Returns ULICS (universal linear-independent coupling strains) used\nfor deformations in the stress-strain method.</p>\n\n<p>For details, refer to doi:10.1016/j.cpc.2009.11.017.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>max_eps</strong> (float, optional):\nMagnitude of the stress (largest component in Voigt's notation).\nDefaults to 1.5e-2.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>numpy.ndarray</strong>: 6x6 matrix of ULICS.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">max_eps</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.015</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.scopes.cij.apply_strain", "modulename": "wmaee.scopes.cij", "qualname": "apply_strain", "kind": "function", "doc": "<p>Applies strain to a structure.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>struct</strong> (ase.Atoms):\nInitial structure.</li>\n<li><strong>strain</strong> (ArrayLike):\nStrain to be applied.</li>\n<li><strong>div_two</strong> (bool, optional):\nWhether to apply a factor of 2 when converting from\nVoigt's notation to tensorial 3x3 strain (default is True).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ase.Atoms</strong>: Deformed structure.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">struct</span><span class=\"p\">:</span> <span class=\"n\">ase</span><span class=\"o\">.</span><span class=\"n\">atoms</span><span class=\"o\">.</span><span class=\"n\">Atoms</span>,</span><span class=\"param\">\t<span class=\"n\">strain</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Buffer</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">div_two</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">ase</span><span class=\"o\">.</span><span class=\"n\">atoms</span><span class=\"o\">.</span><span class=\"n\">Atoms</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.scopes.cij.index_from_voigt", "modulename": "wmaee.scopes.cij", "qualname": "index_from_voigt", "kind": "function", "doc": "<p>Convert Voigt's index to matrix indices.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n</strong> (int):\nVoigt's index.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Union[tuple, None]</strong>: Tuple representing matrix indices (a, b) if n is a valid Voigt's index, None otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.scopes.cij.index_to_voigt", "modulename": "wmaee.scopes.cij", "qualname": "index_to_voigt", "kind": "function", "doc": "<p>Converts tensorial (2 indices) to Voigt's (1 index) notation</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>i</strong>:  index in tensorial notation (0..2)</li>\n<li><strong>j</strong>:  index in tensorial notation (0..2)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>index in Voigt's notation (0..6)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">j</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.scopes.cij.transform_tensor", "modulename": "wmaee.scopes.cij", "qualname": "transform_tensor", "kind": "function", "doc": "<p>Transforms tensor according to a given transformation matrix</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tensor</strong>:  tensor to be transformed</li>\n<li><strong>arr</strong>:  transformation matrix</li>\n<li><strong>fact_two</strong>:  whether to apply factors 2, 4, ... during conversion to/from Voigt's notation</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed matrix</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">tensor</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">arr</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">fact_two</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.scopes.cij.from_voigt", "modulename": "wmaee.scopes.cij", "qualname": "from_voigt", "kind": "function", "doc": "<p>Transform the stress or strain array from Voigt's notation into a (3,3) matrix.</p>\n\n<p>In case it is a (6,) array, the function will produce a second-rank tensor (3x3 matrix).\nIn case it is a (6,6) matrix, the function will produce a fourth-rank tensor (3x3x3x3 matrix).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>m</strong> (ndarray):\nThe stress or strain array in Voigt's notation.</li>\n<li><strong>div_two</strong> (bool, optional):\nDivide off-diagonal elements by two (default is True).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ndarray</strong>: A transformed tensor.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If the input data has an unknown shape.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">div_two</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.scopes.cij.to_voigt", "modulename": "wmaee.scopes.cij", "qualname": "to_voigt", "kind": "function", "doc": "<p>Transform a stress or strain array tensor into Voigt's notation.</p>\n\n<p>For a second-rank tensor (3x3 matrix), it transforms into a Voigt's notation (6,).\nFor a fourth-rank tensor (3x3x3x3 matrix), it transforms into a Voigt's notation (6x6).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>m</strong> (NDArray):\nThe stress or strain array tensor.</li>\n<li><strong>times_two</strong> (bool, optional):\nMultiply off-diagonal elements by two (default is True).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>NDArray</strong>: A transformed tensor.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If the input data has an unknown shape.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">times_two</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.scopes.cij.project_cubic", "modulename": "wmaee.scopes.cij", "qualname": "project_cubic", "kind": "function", "doc": "<p>Computes to Cij tensor projected to cubic symmetry</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cij</strong>:  array of shape (6,6) the raw elasticity tensor</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the projected Cij tensor</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cij</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.scopes.cij.project_hexagonal", "modulename": "wmaee.scopes.cij", "qualname": "project_hexagonal", "kind": "function", "doc": "<p>Computes Cij tensor projected to hexagonal symmetry</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cij</strong>:  of shape (6,6) the raw elasticity tensor</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the projected Cij tensor</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cij</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.scopes.eos", "modulename": "wmaee.scopes.eos", "kind": "module", "doc": "<p>Convenient functions for fitting the energy-volume data.</p>\n"}, {"fullname": "wmaee.scopes.eos.eos_birch_murnaghan", "modulename": "wmaee.scopes.eos", "qualname": "eos_birch_murnaghan", "kind": "function", "doc": "<p>Birch-Murnaghan equation of state.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>V</strong> (ArrayLike):\nVolume value(s).</li>\n<li><strong>E0</strong> (float):\nEquilibrium energy.</li>\n<li><strong>V0</strong> (float):\nEquilibrium volume.</li>\n<li><strong>B0</strong> (float):\nEquilibrium bulk modulus.</li>\n<li><strong>Bp</strong> (float):\nPressure derivative of the equilibrium bulk modulus.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>NDArray</strong>: Energies corresponding to the given volumes.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The Birch-Murnaghan equation of state is given by:\nE(V) = E0 + (9<em>B0</em>V0/16) * (((V0/V)<strong>(2/3) - 1)</strong>3 * Bp + ((V0/V)<strong>(2/3) - 1)</strong>2 * (6 - 4<em>(V0/V)</em>*(2/3)))\nwhere E(V) is the energy as a function of volume (V).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">V</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Buffer</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">E0</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">V0</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">B0</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">Bp</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.scopes.eos.birch_murnaghan_fit", "modulename": "wmaee.scopes.eos", "qualname": "birch_murnaghan_fit", "kind": "function", "doc": "<p>Perform a Birch-Murnaghan fit on a given set of volumes and energies.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>volumes</strong> (ArrayLike):\nVolumes.</li>\n<li><strong>energies</strong> (ArrayLike):\nEnergies.</li>\n<li><strong>p0</strong> (Optional[Iterable[float]], optional):\nStarting parameters in the order E0_guess, V0_guess, B0_guess, Bp_guess, by default None.\nIf not provided, default values are calculated based on the input data.</li>\n<li><strong>show_errors</strong> (bool, optional):\nWhether to print the standard deviation of the fitted parameters, by default False.</li>\n<li><strong>eos_function</strong> (bool, optional):\nWhether to return the EOS function as a callable, by default False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Tuple[Iterable[float], Callable[[NDArray], NDArray]]</strong>: Tuple containing the optimum parameters and, optionally, the EOS function.</li>\n<li><strong>optimum</strong> (Iterable[float]):\nOptimal parameters E0, V0, B0, Bp.</li>\n<li><strong>eos_function</strong> (Callable[[NDArray], NDArray], optional):\nThe EOS function as a callable.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The Birch-Murnaghan equation of state is used for fitting.</p>\n\n<p>If <code>eos_function</code> is True, the function returns the EOS function as a callable.</p>\n\n<p>If <code>show_errors</code> is True, the function prints the standard deviation of the fitted parameters.</p>\n\n<p>If <code>p0</code> is not provided, default values are calculated as follows:</p>\n\n<ul>\n<li>V0_guess: (np.amin(volumes) + np.amax(volumes))/2</li>\n<li>E0_guess: np.amin(energies)</li>\n<li>B0_guess: 1  # Presumably in eV/Ang^3; 160.2 in GPa</li>\n<li>Bp_guess: 1</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">volumes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Buffer</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">energies</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Buffer</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">p0</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">show_errors</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">eos_function</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.scopes.eos.eos_murnaghan", "modulename": "wmaee.scopes.eos", "qualname": "eos_murnaghan", "kind": "function", "doc": "<p>Murnaghan equation of state.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>V</strong> (ArrayLike):\nVolume value(s).</li>\n<li><strong>E0</strong> (float):\nEquilibrium energy.</li>\n<li><strong>V0</strong> (float):\nEquilibrium volume.</li>\n<li><strong>B0</strong> (float):\nEquilibrium bulk modulus.</li>\n<li><strong>Bp</strong> (float):\nPressure derivative of the equilibrium bulk modulus.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>NDArray</strong>: Energies corresponding to the given volumes.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The Murnaghan equation of state is given by:\nE(V) = E0 + B0 * V0 * (1/(Bp<em>(Bp-1)) * (V/V0)</em><em>(1-Bp) + V/(Bp</em>V0) - 1/(Bp-1))\nwhere E(V) is the energy as a function of volume (V).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">V</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Buffer</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">E0</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">V0</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">B0</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">Bp</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.scopes.eos.murnaghan_fit", "modulename": "wmaee.scopes.eos", "qualname": "murnaghan_fit", "kind": "function", "doc": "<p>Perform a Murnaghan fit on a given set of volumes and energies.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>volumes</strong> (ArrayLike):\nVolumes.</li>\n<li><strong>energies</strong> (ArrayLike):\nEnergies.</li>\n<li><strong>p0</strong> (Optional[Iterable[float]], optional):\nStarting parameters in the order E0_guess, V0_guess, B0_guess, Bp_guess, by default None.\nIf not provided, default values are calculated based on the input data.</li>\n<li><strong>show_errors</strong> (bool, optional):\nWhether to print the standard deviation of the fitted parameters, by default False.</li>\n<li><strong>eos_function</strong> (bool, optional):\nWhether to return the EOS function as a callable, by default False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Tuple[Iterable[float], Callable[[NDArray], NDArray]]</strong>: Tuple containing the optimum parameters and, optionally, the EOS function.</li>\n<li><strong>optimum</strong> (Iterable[float]):\nOptimal parameters E0, V0, B0, Bp.</li>\n<li><strong>eos_function</strong> (Callable[[NDArray], NDArray], optional):\nThe EOS function as a callable.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The Murnaghan equation of state is used for fitting.</p>\n\n<p>If <code>eos_function</code> is True, the function returns the EOS function as a callable.</p>\n\n<p>If <code>show_errors</code> is True, the function prints the standard deviation of the fitted parameters.</p>\n\n<p>If <code>p0</code> is not provided, default values are calculated as follows:</p>\n\n<ul>\n<li>V0_guess: (np.amin(volumes) + np.amax(volumes))/2</li>\n<li>E0_guess: np.amin(energies)</li>\n<li>B0_guess: 1  # Presumably in eV/Ang^3; 160.2 in GPa</li>\n<li>Bp_guess: 1</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">volumes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Buffer</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">energies</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Buffer</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">p0</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">show_errors</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">eos_function</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.scopes.eos.polynomial_fit", "modulename": "wmaee.scopes.eos", "qualname": "polynomial_fit", "kind": "function", "doc": "<p>Perform a polynomial fit on a given set of volumes and energies.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>volumes</strong> (ArrayLike):\nVolumes.</li>\n<li><strong>energies</strong> (ArrayLike):\nEnergies.</li>\n<li><strong>order</strong> (int, optional):\nOrder of the polynomial fit, by default 3.</li>\n<li><strong>eos_function</strong> (bool, optional):\nWhether to return the EOS function as a callable, by default False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Tuple[float, float, float, Optional[Callable[[NDArray], NDArray]]]</strong>: Tuple containing the equilibrium energy, equilibrium volume, bulk modulus,\nand, optionally, the EOS function.</li>\n<li><strong>E_eq</strong> (float):\nEquilibrium energy.</li>\n<li><strong>V_eq</strong> (float):\nEquilibrium volume.</li>\n<li><strong>B_eq</strong> (float):\nBulk modulus.</li>\n<li><strong>eos_function</strong> (Callable[[NDArray], NDArray], optional):\nThe EOS function as a callable.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The function performs a polynomial fit of the data and calculates equilibrium properties.</p>\n\n<p>If <code>eos_function</code> is True, the function returns the EOS function as a callable.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">volumes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Buffer</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">energies</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Buffer</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">order</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">eos_function</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.scopes.md", "modulename": "wmaee.scopes.md", "kind": "module", "doc": "<p>Analysis and plotting of (AI)MD runs</p>\n"}, {"fullname": "wmaee.scopes.md.plot_MD", "modulename": "wmaee.scopes.md", "qualname": "plot_MD", "kind": "function", "doc": "<p>Plots multiple properties from a DataFrame in a grid layout.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong> (pd.DataFrame):\nThe DataFrame containing the data to plot.</li>\n<li><strong>time</strong> (Optional[str], optional):\nThe column name to use as the time axis. If None, a default range is used, by default None.</li>\n<li><strong>timestep</strong> (int, optional):\nThe timestep interval for the default time axis, by default 1.</li>\n<li><strong>grid</strong> (Tuple[int, int], optional):\nThe grid size for the subplots (rows, columns), by default (1, 1).</li>\n<li><strong>props</strong> (List[str], optional):\nThe list of DataFrame columns to plot, by default [].</li>\n<li><strong>labels</strong> (Optional[List[str]], optional):\nThe labels for the y-axis of each subplot, by default None.</li>\n<li><strong>show</strong> (bool, optional):\nWhether to display the plot, by default True.</li>\n<li><strong>**kwargs</strong>: Additional keyword arguments passed to <code>plt.subplots</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Tuple[plt.Figure, np.ndarray]</strong>: The figure and axes array of the created subplots.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timestep</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">grid</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">props</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">show</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.scopes.dos", "modulename": "wmaee.scopes.dos", "kind": "module", "doc": "<p>Collection of routines for reading and plotting density of states.</p>\n\n<p>David Holec\ndavid.holec@unileoben.ac.at</p>\n"}, {"fullname": "wmaee.scopes.dos.dos", "modulename": "wmaee.scopes.dos", "qualname": "dos", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "wmaee.scopes.dos.dos.__init__", "modulename": "wmaee.scopes.dos", "qualname": "dos.__init__", "kind": "function", "doc": "<p>Creates new instance of DOS.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "wmaee.scopes.dos.dos.energy", "modulename": "wmaee.scopes.dos", "qualname": "dos.energy", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "wmaee.scopes.dos.dos.TDOS", "modulename": "wmaee.scopes.dos", "qualname": "dos.TDOS", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "wmaee.scopes.dos.dos.PDOS", "modulename": "wmaee.scopes.dos", "qualname": "dos.PDOS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": None"}, {"fullname": "wmaee.scopes.dos.dos.struct", "modulename": "wmaee.scopes.dos", "qualname": "dos.struct", "kind": "variable", "doc": "<p></p>\n", "annotation": ": None"}, {"fullname": "wmaee.scopes.dos.dos.read_DOS_VASP", "modulename": "wmaee.scopes.dos", "qualname": "dos.read_DOS_VASP", "kind": "function", "doc": "<p>Reads DOSCAR file (VASP output).</p>\n\n<p>Arguments:\n    fDOSCAR:  File with DOSCAR format.\n              Default: DOSCAR\n    fPOSCAR:  File with POSCAR format (for assignment of PDOS).\n              Default: POSCAR</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fDOSCAR</span><span class=\"o\">=</span><span class=\"s1\">&#39;DOSCAR&#39;</span>, </span><span class=\"param\"><span class=\"n\">fPOSCAR</span><span class=\"o\">=</span><span class=\"s1\">&#39;POSCAR&#39;</span>, </span><span class=\"param\"><span class=\"n\">ase_atoms</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "wmaee.scopes.structural_analysis", "modulename": "wmaee.scopes.structural_analysis", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "wmaee.scopes.structural_analysis.rdf", "modulename": "wmaee.scopes.structural_analysis", "qualname": "rdf", "kind": "function", "doc": "<p>Calculate radial distribution function (RDF) for a given structure</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>struct</strong>:  (pymatgen.Structure) the structure</li>\n<li><strong>rmin: (float) Rmin of the radial mesh (default</strong>:  1 (Angstroem))</li>\n<li><strong>rmax: (float) Rmax of the radial mesh (default</strong>:  10 (Angstroem))</li>\n<li><strong>nbins: (int) number of bins (points) along the radial mesh (default</strong>:  90)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>(r:numpy.array, rdf:numpy.array) radial mesh, RDF</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">struct</span>, </span><span class=\"param\"><span class=\"n\">rmin</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">rmax</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">nbins</span><span class=\"o\">=</span><span class=\"mi\">90</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "wmaee.scopes.structural_analysis.rdf_partial", "modulename": "wmaee.scopes.structural_analysis", "qualname": "rdf_partial", "kind": "function", "doc": "<p>Calculate radial distribution function (RDF) including all partial RDFs for a given structure</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>struct</strong>:  (pymatgen.Structure) the structure</li>\n<li><strong>rmin: (float) Rmin of the radial mesh (default</strong>:  1 (Angstroem))</li>\n<li><strong>rmax: (float) Rmax of the radial mesh (default</strong>:  10 (Angstroem))</li>\n<li><strong>nbins: (int) number of bins (points) along the radial mesh (default</strong>:  90)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>(pandas.DataFrame) [R, RDF_tot, RDF_X-X, RDF_X-Y, ...]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">struct</span>, </span><span class=\"param\"><span class=\"n\">rmin</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">rmax</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">nbins</span><span class=\"o\">=</span><span class=\"mi\">90</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "wmaee.utils", "modulename": "wmaee.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "wmaee.utils.geometry", "modulename": "wmaee.utils.geometry", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "wmaee.utils.geometry.find_neighbors", "modulename": "wmaee.utils.geometry", "qualname": "find_neighbors", "kind": "function", "doc": "<p>Find neighbors for each atom within a specified cutoff distance and minimum distance.</p>\n\n<p>This function applies the minimum image convention to consider periodic boundary conditions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>atoms</strong> (Union[Atoms, Any]):\nThe atoms object to query. It can be an Atoms object or any other compatible type.</li>\n<li><strong>rcut</strong> (float, optional):\nThe cutoff distance for neighbor search, by default 3.0.</li>\n<li><strong>mindist</strong> (float, optional):\nThe minimum distance for neighbor search, by default 0.1.</li>\n<li><strong>properties</strong> (Tuple[str, ...], optional):\nAn iterable of properties to return for each atom. \nAvailable options are 'indices', 'distances', 'images', 'vecs', by default ('indices', 'distances', 'images', 'vecs').</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[int, Tuple[np.ndarray, ...]]</strong>: A dictionary where the keys represent the atom ids, and the values are tuples containing the desired properties.\n<ul>\n<li>'indices': Indices of neighboring atoms.</li>\n<li>'distances': Distances to neighboring atoms.</li>\n<li>'images': Indices of periodic images of neighboring atoms.</li>\n<li>'vecs': Vectors pointing from the central atom to its neighbors.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">atoms</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">ase</span><span class=\"o\">.</span><span class=\"n\">atoms</span><span class=\"o\">.</span><span class=\"n\">Atoms</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">rcut</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">3.0</span>,</span><span class=\"param\">\t<span class=\"n\">mindist</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">properties</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;indices&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;distances&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;images&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;vecs&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "wmaee.utils.plot", "modulename": "wmaee.utils.plot", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "wmaee.utils.plot.scatter_hist", "modulename": "wmaee.utils.plot", "qualname": "scatter_hist", "kind": "function", "doc": "<p>Create a scatter plot with histograms on the margins.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (np.ndarray):\nData for the x-axis.</li>\n<li><strong>y</strong> (np.ndarray):\nData for the y-axis.</li>\n<li><strong>xlabel</strong> (Optional[str], optional):\nLabel for the x-axis. Default is None.</li>\n<li><strong>ylabel</strong> (Optional[str], optional):\nLabel for the y-axis. Default is None.</li>\n<li><strong>figsize</strong> (Tuple[float, float], optional):\nSize of the figure (width, height). Default is (6, 6).</li>\n<li><strong>alpha</strong> (float, optional):\nTransparency of the scatter plot points. Default is 0.1.</li>\n<li><strong>alphax</strong> (float, optional):\nTransparency of the x-axis histogram bars. Default is 0.7.</li>\n<li><strong>alphay</strong> (float, optional):\nTransparency of the y-axis histogram bars. Default is 0.7.</li>\n<li><strong>marker</strong> (str, optional):\nMarker style for the scatter plot. Default is '.'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Tuple[plt.Figure, plt.Axes]</strong>: The created figure and the main scatter plot axes.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">xlabel</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ylabel</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">alphax</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.7</span>,</span><span class=\"param\">\t<span class=\"n\">alphay</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.7</span>,</span><span class=\"param\">\t<span class=\"n\">marker</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span><span class=\"p\">,</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();